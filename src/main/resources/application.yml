server:
  port: ${PORT:8080}
  forward-headers-strategy: framework

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      probes:
        enabled: true

spring:
  data:
    mongodb:
      uri: ${SPRING_DATA_MONGODB_URI}
  servlet:
    multipart:
      enabled: true
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:10MB}

  # ---------------------------------------------
  # SMTP: ใช้เฉพาะเมื่อเปิดโปรไฟล์ 'smtp' เท่านั้น
  # (ใน Railway/production เราจะไม่ใช้ SMTP)
  # ---------------------------------------------
  mail:
    host: ${SMTP_HOST:}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USER:}
    password: ${SMTP_PASS:}
    properties:
      mail:
        smtp:
          auth: ${SMTP_AUTH:true}
          starttls:
            enable: ${SMTP_STARTTLS:true}

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui
    operationsSorter: method
    tagsSorter: alpha

# -----------------------
# คอนฟิกของแอป
# -----------------------
app:
  mail:
    # ตัวส่งจริงจะอ่านค่าจากตรงนี้ ไม่ผูกกับ spring.mail
    from: ${APP_MAIL_FROM:StyleWhere <onboarding@resend.dev>}
  jwt:
    access-secret: ${JWT_ACCESS_SECRET:DEMO_ACCESS_SECRET_MIN_32_BYTES________________________________}
    refresh-secret: ${JWT_REFRESH_SECRET:DEMO_REFRESH_SECRET_MIN_32_BYTES_______________________________}
    access-expiration-ms: ${JWT_ACCESS_EXPIRE_MS:900000}
    refresh-expiration-ms: ${JWT_REFRESH_EXPIRE_MS:604800000}
  security:
    cors:
      # เพิ่มโดเมนของคุณที่ FE ใช้งานจริง (ใส่ , คั่นเพิ่มได้)
      allowed-origins: ${ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173,https://shirtshop-frontend.vercel.app}
      allowed-methods: ${ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS}
      allowed-headers: ${ALLOWED_HEADERS:Authorization,Content-Type,Accept,Origin,User-Agent,Cache-Control,Pragma}
      allow-credentials: ${ALLOW_CREDENTIALS:true}
  cloudinary:
    cloud-name: ${CLOUDINARY_CLOUD_NAME:}
    api-key: ${CLOUDINARY_API_KEY:}
    api-secret: ${CLOUDINARY_API_SECRET:}
    default-folder: ${CLOUDINARY_FOLDER:shirtshop}

  payment:
    promptpay:
      target: ${PROMPTPAY_TARGET:0952544014}
      expire-minutes: ${PROMPTPAY_EXPIRE_MINUTES:10}

ml:
  gradio:
    base-url: ${ML_BASE_URL:}
    endpoint: ${ML_ENDPOINT:/api/tryon}
    mode: ${ML_MODE:json}
    description: ${ML_DESCRIPTION:Short Sleeve Round Neck T-shirts}
    is-checked: ${ML_IS_CHECKED:true}
    is-checked-crop: ${ML_IS_CHECKED_CROP:false}
    denoise-steps: ${ML_DENOISE_STEPS:30}
    seed: ${ML_SEED:42}

# -----------------------
# Resend (HTTP API)
# ใช้เมื่อเปิดโปรไฟล์ 'resend'
# -----------------------
resend:
  apiKey: ${RESEND_API_KEY:}

# (ตัวเลือก) map กลุ่มโปรไฟล์ ถ้าต้องการเปิด 'prod' แล้วให้ดึง 'resend' อัตโนมัติ
# เปิดใช้ได้โดยตั้ง SPRING_PROFILES_ACTIVE=prod
#spring:
#  profiles:
#    group:
#      prod: resend

# ---------- โปรไฟล์ DEV (mailpit) ----------
---
spring:
  config:
    activate:
      on-profile: dev
  mail:
    host: ${DEV_SMTP_HOST:localhost}
    port: ${DEV_SMTP_PORT:1025}
    username:
    password:
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false

app:
  security:
    cors:
      allowed-origins: ${ALLOWED_ORIGINS_DEV:http://localhost:3000,http://localhost:5173}

# ---------- โปรไฟล์ SMTP (ใช้เฉพาะเมื่ออยากส่งผ่าน SMTP จริง) ----------
---
spring:
  config:
    activate:
      on-profile: smtp
# ใช้ค่าจาก spring.mail ด้านบนตามปกติ

# ---------- โปรไฟล์ RESEND (ส่งเมลผ่าน Resend HTTP API) ----------
---
spring:
  config:
    activate:
      on-profile: resend
# ใช้ค่าจาก 'resend.apiKey' + 'app.mail.from'
